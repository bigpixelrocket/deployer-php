---
alwaysApply: true
---

## Symfony Console Rules

**🚨 Console rules are MANDATORY and IMMUTABLE - fix violating code, not the console rules**

### 📤 Output Method Philosophy

**🚨 NEVER use Symfony IO methods directly - use [BaseCommand.php](mdc:app/Contracts/BaseCommand.php) methods exclusively**

**Core Principle:** All console output flows through custom methods in BaseCommand that:

- Provide modern, beautiful TUI styling
- Maintain consistent user experience
- Enable centralized output control

**Custom IO Methods (MANDATORY):**

```php
// ✅ CORRECT - BaseCommand custom methods
$this->writeln(['Multiple', 'lines']);     // Multi-line output
$this->hr();                               // Beautiful section separator
$this->h1('Section Heading');              // Heading with icon

// Status messages
$this->success('Server added successfully');
$this->error('Failed to connect to server');
$this->warning('Skipping connection check');
$this->info('Configuration loaded');
```

**❌ FORBIDDEN - Direct Symfony IO Usage:**

```php
// ❌ NEVER use Symfony methods directly
$this->io->writeln('Direct output');      // Bypasses our custom styling
$this->io->text('Raw text');              // Inconsistent with our TUI
$this->io->success('Task done');          // Basic, outdated styling
```

**🔧 Missing a Method? Create It!**

If you need output functionality not in [BaseCommand.php](mdc:app/Contracts/BaseCommand.php):

1. Add a new method to BaseCommand
2. Use modern styling and formatting
3. Keep it reusable and minimal
4. Document with example usage

```php
// ✅ CORRECT - Extend BaseCommand for new needs
protected function success(string $message): void {
    // Custom success styling here
}
```

**Integration Points:**

- Base implementation: [BaseCommand.php](mdc:app/Contracts/BaseCommand.php)
- Output trait: [ConsoleOutputTrait.php](mdc:app/Traits/ConsoleOutputTrait.php)
- Input trait: [ConsoleInputTrait.php](mdc:app/Traits/ConsoleInputTrait.php)
- Output methods: `writeln()`, `info()`, `hr()`, `h1()`
- Status methods: `success()`, `error()`, `warning()`
- Input methods: `getOptionOrPrompt()`, `promptText()`, `promptPassword()`, `promptConfirm()`, `promptSelect()`, `promptMultiselect()`, `promptSuggest()`, `promptSearch()`, `promptPause()`, `promptSpin()`
- Helper methods: `showCommandHint()`

**When to Add New Methods:**

Console functionality is organized using traits for reusability:

- **ConsoleOutputTrait:** Add output/formatting methods that format and display text
    - Examples: status messages, headings, separators, formatting helpers
    - All methods should work with `$this->io` (SymfonyStyle)

- **ConsoleInputTrait:** Add input gathering methods that collect user data
    - Examples: prompt helpers, option validators, input transformers
    - All methods should work with `$this->input` (InputInterface)

- **BaseCommand:** Add only shared initialization, configuration, or orchestration logic
    - Examples: service initialization, common options, execution flow
    - NOT for individual I/O operations

This separation ensures console I/O methods remain reusable across different command contexts.

### 📣 Status Message Helpers

**Use status helpers for consistent success/error/warning messages:**

```php
// ✅ Success messages (green checkmark)
$this->success('Server added successfully');
$this->success('Connection successful');

// ✅ Error messages (red X)
$this->error('Failed to connect to server');
$this->error('Failed to add server: ' . $e->getMessage());

// ✅ Info messages (cyan info symbol)
$this->info('Configuration loaded from .env');
$this->info('Using custom inventory path');

// ✅ Warning messages (yellow warning symbol)
$this->warning('Skipping SSH connection check');
$this->warning('Server add cancelled');
```

**Benefits:**

- Consistent formatting across all commands
- Clear visual indicators (✓, ✗, ℹ, ⚠)
- Modern, colorful output styling

### 🎯 User Input with Laravel Prompts

**Use `laravel/prompts` for ALL user interactions to create rich CLI experiences:**

```php
use function Laravel\Prompts\text;
use function Laravel\Prompts\password;
use function Laravel\Prompts\confirm;
use function Laravel\Prompts\select;
use function Laravel\Prompts\multiselect;
use function Laravel\Prompts\suggest;
use function Laravel\Prompts\search;
use function Laravel\Prompts\spin;

// ✅ CORRECT - Modern prompts
$name = text('What is your name?', required: true);
$password = password('Enter password:', required: true);
$confirmed = confirm('Deploy to production?', default: false);
$environment = select('Select environment:', ['dev', 'staging', 'prod']);
$features = multiselect('Enable features:', ['cache', 'queue', 'logs']);

// Spinners for long operations
$result = spin(fn() => $this->service->heavyOperation(), 'Processing...');
```

**Key Benefits:**

- Beautiful, interactive prompts with validation
- Auto-complete and search functionality
- Loading spinners for long operations
- Consistent, modern user experience
- Zero Symfony IO boilerplate

### 📋 Command Layer Patterns

**Console I/O Rules:**

- Commands handle ALL user interaction (input/output)
- Services return plain data - NO console operations
- Use consistent styling patterns across all commands
- Validation errors bubble up to Commands for display

**Core Flow:**

```php
class MyCommand extends BaseCommand {
    protected function execute(InputInterface $input, OutputInterface $output): int {
        // ✅ CORRECT - Custom BaseCommand methods
        $this->h1('Deployment');
        $this->info('Starting deployment process...');

        // Prompt user with Laravel Prompts
        $confirmed = confirm('Continue with deployment?', default: true);

        // Services return data, not output
        $result = $this->service->performWork();

        // Custom output formatting
        $this->success('Deployment completed: ' . $result);

        return Command::SUCCESS;
    }
}
```

**Key Benefits:**

- Consistent user experience across all commands
- Easy testing with mockable I/O patterns
- Clean separation between business logic and presentation

**Rule:** Commands orchestrate Services and format output. Services never touch console I/O.

### 🔀 Interactive + Options Pattern

**Support both interactive prompts AND command-line options for maximum flexibility:**

```php
protected function configure(): void {
    parent::configure();

    $this->addOption('name', null, InputOption::VALUE_REQUIRED, 'Server name');
    $this->addOption('host', null, InputOption::VALUE_REQUIRED, 'Host/IP address');
    $this->addOption('yes', 'y', InputOption::VALUE_NONE, 'Skip confirmation');
}

protected function execute(InputInterface $input, OutputInterface $output): int {
    // Use getOptionOrPrompt with closures for flexible prompting
    $name = $this->getOptionOrPrompt(
        'name',
        fn() => $this->promptText(
            label: 'Server name:',
            placeholder: 'production-web-01',
            required: true
        )
    );

    $host = $this->getOptionOrPrompt(
        'host',
        fn() => $this->promptText(
            label: 'Host/IP address:',
            placeholder: '192.168.1.100',
            required: true
        )
    );

    $skipConfirm = $this->getOptionOrPrompt(
        'yes',
        fn() => $this->promptConfirm(
            label: 'Skip verification?',
            default: false
        )
    );

    // ... process command ...

    // Show command hint for non-interactive usage
    $this->showCommandHint('my:command', [
        'name' => $name,
        'host' => $host,
        'yes' => $skipConfirm,
    ]);

    return Command::SUCCESS;
}
```

**`getOptionOrPrompt()` Helper:**

The `getOptionOrPrompt()` method is available in BaseCommand for all commands:

- **Signature:** `getOptionOrPrompt(string $optionName, Closure $promptCallback): mixed`
- Checks if option was provided via CLI
- If yes, returns the option value directly
- If not, executes the closure to prompt user interactively
- Supports any return type (string, bool, int, array) via the closure
- Works with all prompt methods: `promptText()`, `promptSelect()`, `promptConfirm()`, etc.

**Prompt Wrapper Methods:**

ConsoleInputTrait provides wrappers for all Laravel Prompts functions:

- `promptText()` - Text input with validation
- `promptPassword()` - Password input (masked)
- `promptConfirm()` - Yes/No confirmation
- `promptSelect()` - Single selection from list
- `promptMultiselect()` - Multiple selections
- `promptSuggest()` - Autocomplete suggestions
- `promptSearch()` - Searchable options
- `promptPause()` - Wait for Enter key
- `promptSpin()` - Loading spinner for operations

All wrappers automatically suppress extra spacing for cleaner output.

**Command Hint Output:**

Shows the complete non-interactive command with all options for easy copy/paste:

```
◆ Run non-interactively:

  vendor/bin/deployer my:command \
    --name='production-web-01' \
    --host='192.168.1.100' \
    --yes
```

**Benefits:**

- Script-friendly with full option support
- User-friendly with interactive fallbacks
- Educational - teaches users the non-interactive syntax
- Flexible - supports any prompt type via closures
- Type-safe - preserves return types from prompts
- DRY - single command serves both use cases
