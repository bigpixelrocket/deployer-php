---
alwaysApply: true
---

## Symfony Console Rules

**🚨 Console rules are MANDATORY and IMMUTABLE - fix violating code, not the console rules**

### 📤 Output Method Philosophy

**🚨 NEVER use Symfony IO methods directly - use [BaseCommand.php](mdc:app/Contracts/BaseCommand.php) methods exclusively**

**Core Principle:** All console output flows through custom methods in BaseCommand that:

- Provide modern, beautiful TUI styling
- Maintain consistent user experience
- Enable centralized output control

**Custom IO Methods (MANDATORY):**

```php
// ✅ CORRECT - BaseCommand custom methods
$this->writeln(['Multiple', 'lines']);     // Multi-line output
$this->text('Single line message');       // Simple text output
$this->hr();                              // Beautiful section separator
```

**❌ FORBIDDEN - Direct Symfony IO Usage:**

```php
// ❌ NEVER use Symfony methods directly
$this->io->writeln('Direct output');      // Bypasses our custom styling
$this->io->text('Raw text');              // Inconsistent with our TUI
$this->io->success('Task done');          // Basic, outdated styling
```

**🔧 Missing a Method? Create It!**

If you need output functionality not in [BaseCommand.php](mdc:app/Contracts/BaseCommand.php):

1. Add a new method to BaseCommand
2. Use modern styling and formatting
3. Keep it reusable and minimal
4. Document with example usage

```php
// ✅ CORRECT - Extend BaseCommand for new needs
protected function success(string $message): void {
    // Custom success styling here
}
```

**Integration Points:**

- Base implementation: [BaseCommand.php](mdc:app/Contracts/BaseCommand.php)
- Current methods: `writeln()`, `text()`, `hr()`

### 🎯 User Input with Laravel Prompts

**Use `laravel/prompts` for ALL user interactions to create rich CLI experiences:**

```php
use function Laravel\Prompts\text;
use function Laravel\Prompts\password;
use function Laravel\Prompts\confirm;
use function Laravel\Prompts\select;
use function Laravel\Prompts\multiselect;
use function Laravel\Prompts\suggest;
use function Laravel\Prompts\search;
use function Laravel\Prompts\spin;

// ✅ CORRECT - Modern prompts with interaction check
if ($this->io->isInteractive()) {
    $name = text('What is your name?', required: true);
    $password = password('Enter password:', required: true);
    $confirmed = confirm('Deploy to production?', default: false);
    $environment = select('Select environment:', ['dev', 'staging', 'prod']);
    $features = multiselect('Enable features:', ['cache', 'queue', 'logs']);
}

// Spinners work in all modes
$result = spin(fn() => $this->service->heavyOperation(), 'Processing...');
```

**Key Benefits:**

- Beautiful, interactive prompts with validation
- Auto-complete and search functionality
- Loading spinners for long operations
- Consistent, modern user experience
- Zero Symfony IO boilerplate

### 📋 Command Layer Patterns

**Console I/O Rules:**

- Commands handle ALL user interaction (input/output)
- Services return plain data - NO console operations
- Use consistent styling patterns across all commands
- Validation errors bubble up to Commands for display

**Core Flow:**

```php
class MyCommand extends BaseCommand {
    protected function execute(InputInterface $input, OutputInterface $output): int {
        // ✅ CORRECT - Custom BaseCommand methods
        $this->text('Starting process...');

        // Prompt user with Laravel Prompts
        $confirmed = confirm('Continue with deployment?', default: true);

        // Services return data, not output
        $result = $this->service->performWork();

        // Custom output formatting
        $this->writeln('<fg=green>✓</> Completed: ' . $result);

        return Command::SUCCESS;
    }
}
```

**Key Benefits:**

- Consistent user experience across all commands
- Easy testing with mockable I/O patterns
- Clean separation between business logic and presentation

**Rule:** Commands orchestrate Services and format output. Services never touch console I/O.
