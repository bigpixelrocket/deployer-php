---
alwaysApply: true
---

## Symfony Console Rules

**🚨 Console rules are MANDATORY and IMMUTABLE - fix violating code, not the console rules**

### 📤 Output Method Philosophy

**🚨 NEVER use Symfony IO methods directly - use [BaseCommand.php](mdc:app/Contracts/BaseCommand.php) methods exclusively**

**Core Principle:** All console output flows through custom methods in BaseCommand that:

- Provide modern, beautiful TUI styling
- Maintain consistent user experience
- Enable centralized output control

**Custom IO Methods (MANDATORY):**

```php
// ✅ CORRECT - BaseCommand custom methods
$this->writeln(['Multiple', 'lines']);     // Multi-line output
$this->text('Single line message');        // Simple text output
$this->hr();                               // Beautiful section separator
$this->h1('Section Heading');              // Heading with icon

// Status messages
$this->success('Server added successfully');
$this->error('Failed to connect', 'Check your SSH key permissions');
$this->warning('Skipping connection check');
```

**❌ FORBIDDEN - Direct Symfony IO Usage:**

```php
// ❌ NEVER use Symfony methods directly
$this->io->writeln('Direct output');      // Bypasses our custom styling
$this->io->text('Raw text');              // Inconsistent with our TUI
$this->io->success('Task done');          // Basic, outdated styling
```

**🔧 Missing a Method? Create It!**

If you need output functionality not in [BaseCommand.php](mdc:app/Contracts/BaseCommand.php):

1. Add a new method to BaseCommand
2. Use modern styling and formatting
3. Keep it reusable and minimal
4. Document with example usage

```php
// ✅ CORRECT - Extend BaseCommand for new needs
protected function success(string $message): void {
    // Custom success styling here
}
```

**Integration Points:**

- Base implementation: [BaseCommand.php](mdc:app/Contracts/BaseCommand.php)
- Output methods: `writeln()`, `text()`, `hr()`, `h1()`
- Status methods: `success()`, `error()`, `warning()`
- Input methods: `getOptionOrPrompt()`
- Helper methods: `showCommandHint()`

### 📣 Status Message Helpers

**Use status helpers for consistent success/error/warning messages:**

```php
// ✅ Success messages (green checkmark)
$this->success('Server added successfully');
$this->success('Connection successful');

// ✅ Error messages (red X) with optional tip
$this->error('Failed to connect to server');
$this->error(
    'Failed to add server: ' . $e->getMessage(),
    'Use <fg=cyan>server:list</> to view existing servers.'
);

// ✅ Warning messages (yellow warning symbol)
$this->warning('Skipping SSH connection check');
$this->warning('Server add cancelled');
```

**Benefits:**

- Consistent formatting across all commands
- Automatic spacing (blank line after message)
- Clear visual indicators (✓, ✗, ⚠)
- Optional tips for error messages

### 🎯 User Input with Laravel Prompts

**Use `laravel/prompts` for ALL user interactions to create rich CLI experiences:**

```php
use function Laravel\Prompts\text;
use function Laravel\Prompts\password;
use function Laravel\Prompts\confirm;
use function Laravel\Prompts\select;
use function Laravel\Prompts\multiselect;
use function Laravel\Prompts\suggest;
use function Laravel\Prompts\search;
use function Laravel\Prompts\spin;

// ✅ CORRECT - Modern prompts
$name = text('What is your name?', required: true);
$password = password('Enter password:', required: true);
$confirmed = confirm('Deploy to production?', default: false);
$environment = select('Select environment:', ['dev', 'staging', 'prod']);
$features = multiselect('Enable features:', ['cache', 'queue', 'logs']);

// Spinners for long operations
$result = spin(fn() => $this->service->heavyOperation(), 'Processing...');
```

**Key Benefits:**

- Beautiful, interactive prompts with validation
- Auto-complete and search functionality
- Loading spinners for long operations
- Consistent, modern user experience
- Zero Symfony IO boilerplate

### 📋 Command Layer Patterns

**Console I/O Rules:**

- Commands handle ALL user interaction (input/output)
- Services return plain data - NO console operations
- Use consistent styling patterns across all commands
- Validation errors bubble up to Commands for display

**Core Flow:**

```php
class MyCommand extends BaseCommand {
    protected function execute(InputInterface $input, OutputInterface $output): int {
        // ✅ CORRECT - Custom BaseCommand methods
        $this->text('Starting process...');

        // Prompt user with Laravel Prompts
        $confirmed = confirm('Continue with deployment?', default: true);

        // Services return data, not output
        $result = $this->service->performWork();

        // Custom output formatting
        $this->writeln('<fg=green>✓</> Completed: ' . $result);

        return Command::SUCCESS;
    }
}
```

**Key Benefits:**

- Consistent user experience across all commands
- Easy testing with mockable I/O patterns
- Clean separation between business logic and presentation

**Rule:** Commands orchestrate Services and format output. Services never touch console I/O.

### 🔀 Interactive + Options Pattern

**Support both interactive prompts AND command-line options for maximum flexibility:**

```php
protected function configure(): void {
    parent::configure();

    $this->addOption('name', null, InputOption::VALUE_REQUIRED, 'Server name');
    $this->addOption('host', null, InputOption::VALUE_REQUIRED, 'Host/IP address');
    $this->addOption('yes', 'y', InputOption::VALUE_NONE, 'Skip confirmation');
}

protected function execute(InputInterface $input, OutputInterface $output): int {
    // Track which options were provided vs prompted
    $provided = [];

    // Use BaseCommand helper method
    $name = $this->getOptionOrPrompt(
        $input,
        'name',
        'Server name:',
        placeholder: 'production-web-01',
        wasProvided: $provided['name']
    );

    $host = $this->getOptionOrPrompt(
        $input,
        'host',
        'Host/IP address:',
        placeholder: '192.168.1.100',
        wasProvided: $provided['host']
    );

    // ... process command ...

    // Show command hint with highlighted missing options
    $this->showCommandHint('my:command', [
        'name' => $name,
        'host' => $host,
        'yes' => true,
    ], $provided);

    return Command::SUCCESS;
}
```

**`getOptionOrPrompt()` Helper:**

The `getOptionOrPrompt()` method is available in BaseCommand for all commands:

- Checks if option was provided via CLI
- If yes, returns the value and sets `wasProvided` to `true`
- If not, prompts user interactively and sets `wasProvided` to `false`
- Supports all Laravel Prompts parameters (label, default, required, placeholder)

**Command Hint Output:**

- Gray = option was provided
- Bright yellow = option was prompted (user should include next time)
- Shows complete non-interactive command for copy/paste

**Benefits:**

- Script-friendly with full option support
- User-friendly with interactive fallbacks
- Educational - teaches users the non-interactive syntax
- DRY - single command serves both use cases
