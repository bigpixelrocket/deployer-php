---
alwaysApply: true
---

## Testing Rules

**Philosophy:** "A test that never fails is not a test, it's a lie."

**Framework:** Pest exclusively with `it()` syntax, 80%+ coverage

### Running Tests

- `composer pest` - run entire test suite in parallel, with coverage
- `vendor/bin/pest $TEST_FILE` - run specific test file

### Dependency Injection in Tests

**The DI Container rule applies to PRODUCTION code, not tests.**

**✅ PREFERRED - Manual Instantiation (Unit Tests):**

```php
// Testing services in isolation
$mockFs = mockFilesystem(true, 'content');
$service = new EnvService(new FilesystemService($mockFs), new Dotenv());
```

Benefits: Clear dependency wiring, easy mock injection, no container overhead.

**✅ RECOMMENDED - Container with Bindings (Command/Integration Tests):**

```php
// Testing commands with mockCommandContainer()
$container = mockCommandContainer();
$command = $container->build(ServerAddCommand::class);

// Override specific services when needed
$customSSH = mockSSHServiceWithBehavior(canConnect: false);
$container = mockCommandContainer(ssh: $customSSH);
$command = $container->build(ServerAddCommand::class);

// Pre-populate inventory data
$container = mockCommandContainer(
    inventoryData: ['servers' => [['name' => 'web1', 'host' => '192.168.1.1']]]
);
$command = $container->build(ServerListCommand::class);
```

Benefits: Sustainable (no updates needed when BaseCommand grows), consistent pattern, easy service overrides.

**✅ OPTIONAL - Container Auto-wiring (Edge Cases):**

```php
// Testing DI configuration or service integration
$container = new Container();
$container->bind(Filesystem::class, $mockFs);
$service = $container->build(CustomService::class);
```

When to use: Verifying DI configuration or testing multiple services together.

**Rule:** Unit tests (services/utilities) use manual instantiation. Command/integration tests use `mockCommandContainer()`.

**Maintenance Note:** When adding a new service to `BaseCommand`, update `mockCommandContainer()` in `tests/TestHelpers.php`:

```php
function mockCommandContainer(
    ?NewService $newService = null,  // 1. Add parameter
    // ... existing parameters
) {
    // ...
    $newService = $newService ?? mockNewService();  // 2. Build or use provided

    // Bind services to container
    $container->bind(NewService::class, $newService);  // 3. Bind to container
    // ...
}
```

This is the ONLY place you need to update for command testing.

### Test Minimalism

**Target:** Keep test files under 1.8x the size of source code they test.

**Rules:**

- Test core business logic only, skip framework testing
- Use dataset-driven testing: `->with([])` for multiple scenarios
- Eliminate test overlap: no two tests covering same functionality
- Consolidate assertions: `expect($x)->toBe(1)->and($y)->toBe(2)`
- Mock external dependencies only
- No performance tests unless performance is the primary concern
- Don't sacrifice readability for ratio targets

**Don't consolidate when:**

- Different public methods
- Exception vs normal flow tests
- Different setup requirements
- Distinct business logic

### AAA Pattern (MANDATORY)

```php
it('does something specific', function () {
    // ARRANGE
    $service = new Service(mock(Dependency::class));

    // ACT
    $result = $service->performAction();

    // ASSERT
    expect($result)->toBe('expected');

    // CLEANUP (when needed)
    $this->resetTimeState();
    unlink($tempFile);
});
```

**Exception tests:** Use `// ACT & ASSERT` when act triggers assertion.

**Organization:** Use `describe()` blocks, `beforeEach()` setup, extract helpers/traits for DRY tests.

### Testing Patterns

**❌ FORBIDDEN:**

```php
expect($x)->toBeInstanceOf(Class::class);     // Type-only testing
expect($x)->toBeArray();                      // Generic assertions
expect($x)->not->toBeNull();                  // Meaningless
expect(true)->toBeTrue();                     // Literally meaningless
sleep(...);                                   // Use time mocking
```

**✅ REQUIRED:**

```php
expect($config->getValue('host'))->toBe('example.com');
expect($this->validator->isValid($input))->toBe($expected);
$mock->shouldReceive('method')->with('param')->andReturn('result');
```

### Test Types

**Unit Tests:**

- Mock all external dependencies (filesystem, HTTP, processes)
- Test single units in isolation
- Complete in milliseconds

**Integration Tests:**

- Real file operations and external processes
- CLI commands and full workflows

**Layer Strategy:**

- CLI Commands → Integration tests
- Business Services → Unit tests (mocked dependencies)
- Utilities/Helpers → Unit tests

### Static Analysis

**Running PHPStan applies to PRODUCTION code, not tests.**

- Ignore PHPStan issues in tests - focus on test functionality over compliance
- Avoid excessive phpdoc just to appease types
